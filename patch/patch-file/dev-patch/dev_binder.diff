diff --git a/drivers/staging/android/binder.c b/drivers/staging/android/binder.c
index ce21274..8255e74 100644
--- a/drivers/staging/android/binder.c
+++ b/drivers/staging/android/binder.c
@@ -36,6 +36,7 @@
 #include <linux/uaccess.h>
 #include <linux/vmalloc.h>
 #include <linux/slab.h>
+#include <linux/dev_namespace.h>
 #include <linux/pid_namespace.h>
 
 #include "binder.h"
@@ -45,17 +46,77 @@ static DEFINE_MUTEX(binder_main_lock);
 static DEFINE_MUTEX(binder_deferred_lock);
 static DEFINE_MUTEX(binder_mmap_lock);
 
-static HLIST_HEAD(binder_procs);
+//static HLIST_HEAD(binder_procs);
 static HLIST_HEAD(binder_deferred_list);
-static HLIST_HEAD(binder_dead_nodes);
+//static HLIST_HEAD(binder_dead_nodes);
 
 static struct dentry *binder_debugfs_dir_entry_root;
 static struct dentry *binder_debugfs_dir_entry_proc;
-static struct binder_node *binder_context_mgr_node;
-static kuid_t binder_context_mgr_uid = INVALID_UID;
-static int binder_last_id;
+//static struct binder_node *binder_context_mgr_node;
+//static kuid_t binder_context_mgr_uid = INVALID_UID;
+//static int binder_last_id;
 static struct workqueue_struct *binder_deferred_workqueue;
 
+struct binder_dev_ns {
+	struct binder_node	*context_mgr_node;
+	kuid_t			context_mgr_uid;
+	int			last_id;
+
+	struct hlist_head	procs;
+	struct hlist_head	dead_nodes;
+
+	struct dev_ns_info	dev_ns_info;
+};
+
+static void binder_ns_initialize(struct binder_dev_ns *binder_ns)
+{
+	INIT_HLIST_HEAD(&binder_ns->procs);
+	INIT_HLIST_HEAD(&binder_ns->dead_nodes);
+
+	binder_ns->context_mgr_uid = INVALID_UID;
+}
+
+
+#ifdef CONFIG_DEV_NS
+
+/* binder_ns_id, get_binder_ns(), get_binder_ns_cur(), put_binder_ns() */
+DEFINE_DEV_NS_INFO(binder)
+
+static struct dev_ns_info *binder_ns_create(struct dev_namespace *dev_ns)
+{
+	struct binder_dev_ns *binder_ns;
+
+	binder_ns = kzalloc(sizeof(*binder_ns), GFP_KERNEL);
+	if (!binder_ns)
+		return ERR_PTR(-ENOMEM);
+
+	binder_ns_initialize(binder_ns);
+
+	return &binder_ns->dev_ns_info;
+}
+
+static void binder_ns_release(struct dev_ns_info *dev_ns_info)
+{
+	struct binder_dev_ns *binder_ns;
+
+	binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+				 dev_ns_info);
+	kfree(binder_ns);
+}
+
+static struct dev_ns_ops binder_ns_ops = {
+	.create = binder_ns_create,
+	.release = binder_ns_release,
+};
+
+#else
+
+/* init_binder_ns, get_binder_ns_cur(), put_binder_ns() */
+DEFINE_DEV_NS_INIT(binder)
+
+#endif /* CONFIG_DEVICE_NS */
+
+
 #define BINDER_DEBUG_ENTRY(name) \
 static int binder_##name##_open(struct inode *inode, struct file *file) \
 { \
@@ -303,6 +364,8 @@ struct binder_proc {
 	void *buffer;
 	ptrdiff_t user_buffer_offset;
 
+    struct binder_dev_ns *binder_ns;
+
 	struct list_head buffers;
 	struct rb_root free_buffers;
 	struct rb_root allocated_buffers;
@@ -904,7 +967,8 @@ static struct binder_node *binder_new_node(struct binder_proc *proc,
 	binder_stats_created(BINDER_STAT_NODE);
 	rb_link_node(&node->rb_node, parent, p);
 	rb_insert_color(&node->rb_node, &proc->nodes);
-	node->debug_id = ++binder_last_id;
+//	node->debug_id = ++binder_last_id;
+	node->debug_id = ++proc->binder_ns->last_id;
 	node->proc = proc;
 	node->ptr = ptr;
 	node->cookie = cookie;
@@ -925,7 +989,8 @@ static int binder_inc_node(struct binder_node *node, int strong, int internal,
 		if (internal) {
 			if (target_list == NULL &&
 			    node->internal_strong_refs == 0 &&
-			    !(node == binder_context_mgr_node &&
+//			    !(node == binder_context_mgr_node &&
+			    !(node == node->proc->binder_ns->context_mgr_node &&
 			    node->has_strong_ref)) {
 				pr_err("invalid inc strong node for %d\n",
 					node->debug_id);
@@ -1039,13 +1104,15 @@ static struct binder_ref *binder_get_ref_for_node(struct binder_proc *proc,
 	if (new_ref == NULL)
 		return NULL;
 	binder_stats_created(BINDER_STAT_REF);
-	new_ref->debug_id = ++binder_last_id;
+//	new_ref->debug_id = ++binder_last_id;
+	new_ref->debug_id = ++proc->binder_ns->last_id;
 	new_ref->proc = proc;
 	new_ref->node = node;
 	rb_link_node(&new_ref->rb_node_node, parent, p);
 	rb_insert_color(&new_ref->rb_node_node, &proc->refs_by_node);
 
-	new_ref->desc = (node == binder_context_mgr_node) ? 0 : 1;
+	//new_ref->desc = (node == binder_context_mgr_node) ? 0 : 1;
+	new_ref->desc = (node == proc->binder_ns->context_mgr_node) ? 0 : 1;
 	for (n = rb_first(&proc->refs_by_desc); n != NULL; n = rb_next(n)) {
 		ref = rb_entry(n, struct binder_ref, rb_node_desc);
 		if (ref->desc > new_ref->desc)
@@ -1385,7 +1452,8 @@ static void binder_transaction(struct binder_proc *proc,
 			}
 			target_node = ref->node;
 		} else {
-			target_node = binder_context_mgr_node;
+//			target_node = binder_context_mgr_node;
+			target_node = proc->binder_ns->context_mgr_node;
 			if (target_node == NULL) {
 				return_error = BR_DEAD_REPLY;
 				goto err_no_context_mgr_node;
@@ -1442,7 +1510,8 @@ static void binder_transaction(struct binder_proc *proc,
 	}
 	binder_stats_created(BINDER_STAT_TRANSACTION_COMPLETE);
 
-	t->debug_id = ++binder_last_id;
+//	t->debug_id = ++binder_last_id;
+	t->debug_id = ++proc->binder_ns->last_id;
 	e->debug_id = t->debug_id;
 
 	if (reply)
@@ -1764,10 +1833,12 @@ static int binder_thread_write(struct binder_proc *proc,
 			if (get_user(target, (uint32_t __user *)ptr))
 				return -EFAULT;
 			ptr += sizeof(uint32_t);
-			if (target == 0 && binder_context_mgr_node &&
+//			if (target == 0 && binder_context_mgr_node &&
+			if (target == 0 && proc->binder_ns->context_mgr_node &&
 			    (cmd == BC_INCREFS || cmd == BC_ACQUIRE)) {
 				ref = binder_get_ref_for_node(proc,
-					       binder_context_mgr_node);
+					       //binder_context_mgr_node);
+					       proc->binder_ns->context_mgr_node);
 				if (ref->desc != target) {
 					binder_user_error("%d:%d tried to acquire reference to desc 0, got %d instead\n",
 						proc->pid, thread->pid,
@@ -2678,32 +2749,32 @@ static int binder_ioctl_set_ctx_mgr(struct file *filp)
 	struct binder_proc *proc = filp->private_data;
 	kuid_t curr_euid = current_euid();
 
-	if (binder_context_mgr_node != NULL) {
+	if (proc->binder_ns->context_mgr_node != NULL) {
 		pr_err("BINDER_SET_CONTEXT_MGR already set\n");
 		ret = -EBUSY;
 		goto out;
 	}
-	if (uid_valid(binder_context_mgr_uid)) {
-		if (!uid_eq(binder_context_mgr_uid, curr_euid)) {
+	if (uid_valid(proc->binder_ns->context_mgr_uid)) {
+		if (!uid_eq(proc->binder_ns->context_mgr_uid, curr_euid)) {
 			pr_err("BINDER_SET_CONTEXT_MGR bad uid %d != %d\n",
 			       from_kuid(&init_user_ns, curr_euid),
 			       from_kuid(&init_user_ns,
-					binder_context_mgr_uid));
+					proc->binder_ns->context_mgr_uid));
 			ret = -EPERM;
 			goto out;
 		}
 	} else {
-		binder_context_mgr_uid = curr_euid;
+		proc->binder_ns->context_mgr_uid = curr_euid;
 	}
-	binder_context_mgr_node = binder_new_node(proc, 0, 0);
-	if (binder_context_mgr_node == NULL) {
+	proc->binder_ns->context_mgr_node = binder_new_node(proc, 0, 0);
+	if (proc->binder_ns->context_mgr_node == NULL) {
 		ret = -ENOMEM;
 		goto out;
 	}
-	binder_context_mgr_node->local_weak_refs++;
-	binder_context_mgr_node->local_strong_refs++;
-	binder_context_mgr_node->has_strong_ref = 1;
-	binder_context_mgr_node->has_weak_ref = 1;
+    proc->binder_ns->context_mgr_node->local_weak_refs++;
+    proc->binder_ns->context_mgr_node->local_strong_refs++;
+    proc->binder_ns->context_mgr_node->has_strong_ref = 1;
+    proc->binder_ns->context_mgr_node->has_weak_ref = 1;
 out:
 	return ret;
 }
@@ -2924,13 +2995,22 @@ err_bad_arg:
 static int binder_open(struct inode *nodp, struct file *filp)
 {
 	struct binder_proc *proc;
+    struct binder_dev_ns *binder_ns;
 
 	binder_debug(BINDER_DEBUG_OPEN_CLOSE, "binder_open: %d:%d\n",
 		     current->group_leader->pid, current->pid);
 
+    binder_ns = get_binder_ns_cur();
+    if(!binder_ns)
+        return -ENOMEM;
+
 	proc = kzalloc(sizeof(*proc), GFP_KERNEL);
-	if (proc == NULL)
+	if (proc == NULL){
+        put_binder_ns(binder_ns);
 		return -ENOMEM;
+    }
+
+    proc->binder_ns = binder_ns;
 	get_task_struct(current);
 	proc->tsk = current;
 	INIT_LIST_HEAD(&proc->todo);
@@ -2940,7 +3020,7 @@ static int binder_open(struct inode *nodp, struct file *filp)
 	binder_lock(__func__);
 
 	binder_stats_created(BINDER_STAT_PROC);
-	hlist_add_head(&proc->proc_node, &binder_procs);
+	hlist_add_head(&proc->proc_node, &binder_ns->procs);
 	proc->pid = current->group_leader->pid;
 	INIT_LIST_HEAD(&proc->delivered_death);
 	filp->private_data = proc;
@@ -3013,10 +3093,12 @@ static int binder_node_release(struct binder_node *node, int refs)
 		return refs;
 	}
 
+    struct binder_proc *proc;
+    proc = node->proc;
 	node->proc = NULL;
 	node->local_strong_refs = 0;
 	node->local_weak_refs = 0;
-	hlist_add_head(&node->dead_node, &binder_dead_nodes);
+	hlist_add_head(&node->dead_node, &proc->binder_ns->dead_nodes);
 
 	hlist_for_each_entry(ref, &node->refs, node_entry) {
 		refs++;
@@ -3054,11 +3136,12 @@ static void binder_deferred_release(struct binder_proc *proc)
 
 	hlist_del(&proc->proc_node);
 
-	if (binder_context_mgr_node && binder_context_mgr_node->proc == proc) {
+	if (proc->binder_ns->context_mgr_node && 
+            proc->binder_ns->context_mgr_node->proc == proc) {
 		binder_debug(BINDER_DEBUG_DEAD_BINDER,
 			     "%s: %d context_mgr_node gone\n",
 			     __func__, proc->pid);
-		binder_context_mgr_node = NULL;
+		proc->binder_ns->context_mgr_node = NULL;
 	}
 
 	threads = 0;
@@ -3144,6 +3227,7 @@ static void binder_deferred_release(struct binder_proc *proc)
 		     __func__, proc->pid, threads, nodes, incoming_refs,
 		     outgoing_refs, active_transactions, buffers, page_count);
 
+    put_binder_ns(proc->binder_ns);
 	kfree(proc);
 }
 
@@ -3515,62 +3599,123 @@ static void print_binder_proc_stats(struct seq_file *m,
 }
 
 
+static void __binder_state_show(struct dev_ns_info *dev_ns_info, void *data)
+ {
+	struct binder_dev_ns *binder_ns;
+	struct seq_file *m = data;
+ 	struct binder_proc *proc;
+ 	struct hlist_node *pos;
+ 	struct binder_node *node;
+	char str[64];
+ 
+	binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+				 dev_ns_info);
+ 
+	snprintf(str, sizeof(str),
+		 "binder state (0x%p):\n", dev_ns_info->dev_ns);
+	seq_puts(m, str);
+ 
+	if (!hlist_empty(&binder_ns->dead_nodes))
+ 		seq_puts(m, "dead nodes:\n");
+	hlist_for_each_entry(node, &binder_ns->dead_nodes, dead_node)
+ 		print_binder_node(m, node);
+	hlist_for_each_entry(proc, &binder_ns->procs, proc_node)
+ 		print_binder_proc(m, proc, 1);
+}
+
 static int binder_state_show(struct seq_file *m, void *unused)
 {
-	struct binder_proc *proc;
-	struct binder_node *node;
 	int do_lock = !binder_debug_no_lock;
 
 	if (do_lock)
 		binder_lock(__func__);
 
-	seq_puts(m, "binder state:\n");
-
-	if (!hlist_empty(&binder_dead_nodes))
-		seq_puts(m, "dead nodes:\n");
-	hlist_for_each_entry(node, &binder_dead_nodes, dead_node)
-		print_binder_node(m, node);
+#ifdef CONFIG_DEV_NS
+	loop_dev_ns_info(binder_ns_id, m, __binder_state_show);
+#else
+	__binder_state_show(&init_binder_ns.dev_ns_info, m);
+#endif
 
-	hlist_for_each_entry(proc, &binder_procs, proc_node)
-		print_binder_proc(m, proc, 1);
-	if (do_lock)
-		binder_unlock(__func__);
-	return 0;
+ 	if (do_lock)
+ 		binder_unlock(__func__);
+ 	return 0;
 }
 
-static int binder_stats_show(struct seq_file *m, void *unused)
+static void __binder_stats_show(struct dev_ns_info *dev_ns_info, void *data)
 {
+	struct binder_dev_ns *binder_ns;
+	struct seq_file *m = data;
 	struct binder_proc *proc;
-	int do_lock = !binder_debug_no_lock;
+	struct hlist_node *pos;
+	char str[64];
 
-	if (do_lock)
-		binder_lock(__func__);
+	binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+				 dev_ns_info);
 
-	seq_puts(m, "binder stats:\n");
+	snprintf(str, sizeof(str),
+		 "binder stats (0x%p):\n", dev_ns_info->dev_ns);
+	seq_puts(m, str);
 
 	print_binder_stats(m, "", &binder_stats);
-
-	hlist_for_each_entry(proc, &binder_procs, proc_node)
+	hlist_for_each_entry(proc,  &binder_ns->procs, proc_node)
 		print_binder_proc_stats(m, proc);
-	if (do_lock)
-		binder_unlock(__func__);
-	return 0;
 }
 
-static int binder_transactions_show(struct seq_file *m, void *unused)
+static int binder_stats_show(struct seq_file *m, void *unused)
 {
+ 	int do_lock = !binder_debug_no_lock;
+ 
+ 	if (do_lock)
+ 		binder_lock(__func__);
+ 
+#ifdef CONFIG_DEV_NS
+	loop_dev_ns_info(binder_ns_id, m, __binder_stats_show);
+#else
+	__binder_stats_show(&init_binder_ns.dev_ns_info, m);
+#endif
+ 
+ 	if (do_lock)
+ 		binder_unlock(__func__);
+ 	return 0;
+}
+
+
+static void __binder_transaction_show(struct dev_ns_info *dev_ns_info,
+				      void *data)
+{
+	struct binder_dev_ns *binder_ns;
+	struct seq_file *m = data;
 	struct binder_proc *proc;
-	int do_lock = !binder_debug_no_lock;
+	struct hlist_node *pos;
+	char str[64];
 
-	if (do_lock)
-		binder_lock(__func__);
+	binder_ns = container_of(dev_ns_info, struct binder_dev_ns,
+				 dev_ns_info);
+
+	snprintf(str, sizeof(str),
+		 "binder transactions (0x%p):\n", dev_ns_info->dev_ns);
+	seq_puts(m, str);
 
-	seq_puts(m, "binder transactions:\n");
-	hlist_for_each_entry(proc, &binder_procs, proc_node)
+	hlist_for_each_entry(proc, &binder_ns->procs, proc_node)
 		print_binder_proc(m, proc, 0);
-	if (do_lock)
-		binder_unlock(__func__);
-	return 0;
+}
+
+static int binder_transactions_show(struct seq_file *m, void *unused)
+{
+ 	int do_lock = !binder_debug_no_lock;
+ 
+ 	if (do_lock)
+ 		binder_lock(__func__);
+ 
+#ifdef CONFIG_DEV_NS
+	loop_dev_ns_info(binder_ns_id, m, __binder_transaction_show);
+#else
+	__binder_transaction_show(&init_binder_ns.dev_ns_info, m);
+#endif
+
+ 	if (do_lock)
+ 		binder_unlock(__func__);
+ 	return 0;
 }
 
 static int binder_proc_show(struct seq_file *m, void *unused)
@@ -3642,6 +3787,16 @@ static int __init binder_init(void)
 	if (!binder_deferred_workqueue)
 		return -ENOMEM;
 
+#ifdef CONFIG_DEV_NS
+	ret = DEV_NS_REGISTER(binder, "binder");
+	if (ret < 0) {
+		destroy_workqueue(binder_deferred_workqueue);
+		return ret;
+	}
+#else
+	binder_ns_initialize(&init_binder_ns);
+#endif
+
 	binder_debugfs_dir_entry_root = debugfs_create_dir("binder", NULL);
 	if (binder_debugfs_dir_entry_root)
 		binder_debugfs_dir_entry_proc = debugfs_create_dir("proc",

